% Autogenerated with DRAKON Editor 1.11

-module(erldemo).
-export([fibonacci/1, foreach/2, main/0, quicksort/2]).

back_cmp(X, Y) ->
    % item 168
    if X < Y -> 
        % item 169
        1
    ; true ->
        % item 173
        if X > Y -> 
            % item 174
            -1
        ; true ->
            % item 175
            0
        end
    end
.

choose_list(Element, Acc, Comparer, Pivot) ->
    % item 204
    {Left, Right} = Acc,
    Cmp = Comparer(Element, Pivot),
    % item 205
    if Cmp =:= -1 -> 
        % item 208
        {[Element | Left], Right}
    ; true ->
        % item 209
        {Left, [Element | Right]}
    end
.

fibonacci(N) ->
    % item 35
    if N == 0 -> 
        % item 19
        [0]
    ; true ->
        % item 20
        Remaining = N - 1,
        Acc = [1, 0],
        % item 21
        Backwards = fibonacci_loop(Acc, Remaining),
        lists:reverse(Backwards)
    end
.

fibonacci_loop(Acc, Remaining) ->
    % item 29
    if Remaining == 0 -> 
        % item 36
        Acc
    ; true ->
        % item 28
        [Xm2, Xm1 | _ ] = Acc,
        Fib = Xm2 + Xm1,
        Acc2 = [ Fib | Acc ],
        % item 33
        fibonacci_loop(Acc2, Remaining - 1)
    end
.

foreach(List, Visitor) ->
    % item 55
    if List == [] -> 
        % item 56
        void
    ; true ->
        % item 59
        [ Head | Rest ] = List,
        Visitor(Head),
        % item 60
        foreach(Rest, Visitor)
    end
.

foreach_demo() ->
    % item 49
    io:format("iteration demo~n"),
    % item 42
    Fib = fibonacci(20),
    Visitor = fun(X) -> print(X) end,
    % item 61
    foreach(Fib, Visitor),
    io:format("~n", [])
.

is_sorted(List) ->
    % item 182
    Length = length(List),
    % item 1830001
    if (Length =:= 0) orelse (Length =:= 1) -> 
        []
    ; true ->
        % item 191
        [First, Second | _] = List,
        % item 192
        Cmp = back_cmp(First, Second),
        % item 193
        if Cmp == 1 -> 
            % item 195
            print_list(List),
            throw("List not sorted")
        ; true ->
            % item 196
            [_ | Tail ] = List,
            is_sorted(Tail)
        end
    end
.

main() ->
    % item 34
    foreach_demo(),
    % item 66
    quicksort_demo()
.

print(Item) ->
    % item 48
    io:format("~w ", [Item])
.

print_list(List) ->
    % item 74
    Visitor = fun(X) -> io:format("~s ", [X]) end,
    foreach(List, Visitor),
    % item 75
    io:format("~n", [])
.

quicksort(List, Comparer) ->
    % item 121
    Length = length(List),
    % item 1220001
    if (Length =:= 0) orelse (Length =:= 1) -> 
        % item 157
        Result = List
    ; true ->
        % item 1220003
        if Length =:= 2 -> 
            % item 158
            [ First, Second | _ ] = List,
            Cmp = Comparer(First, Second),
            % item 159
            if Cmp == -1 -> 
                % item 160
                Result = List
            ; true ->
                % item 138
                Result = [Second, First]
            end
        ; true ->
            % item 141
            [ Pivot | Others ] = List,
            % item 198
            {Left, Right} = lists:foldl(
            	fun(Element, Acc) ->
            		choose_list(Element, Acc, Comparer, Pivot) end,
            	{[], []},
            	Others),
            % item 155
            LeftSorted = quicksort(Left, Comparer),
            RightSorted = quicksort(Right, Comparer),
            % item 161
            Result = LeftSorted ++ [Pivot] ++ RightSorted
        end
    end,
    % item 162
    Result
.

quicksort_demo() ->
    % item 65
    io:format("quick sort demo~n", []),
    % item 67
    Unsorted = [ "the", "sooner", "we", "start", "this", "the", "better" ],
    Sorted   = [ "aa", "bb", "cc", "dd", "ee", "ff" ],
    Reverse  = [ "ff", "ee", "dd", "cc", "bb", "aa" ],
    Empty    = [],
    Flat     = [ "flat", "flat", "flat", "flat", "flat" ],
    % item 91
    Comparer = fun(X, Y) -> back_cmp(X, Y) end,
    Unsorted2 = quicksort(Unsorted, Comparer),
    Sorted2 = quicksort(Sorted, Comparer),
    Reverse2 = quicksort(Reverse, Comparer),
    Empty2 = quicksort(Empty, Comparer),
    Flat2 = quicksort(Flat, Comparer),
    % item 68
    print_list(Unsorted2),
    print_list(Sorted2),
    print_list(Reverse2),
    print_list(Empty2),
    print_list(Flat2),
    % item 197
    is_sorted(Unsorted2),
    is_sorted(Sorted2),
    is_sorted(Reverse2),
    is_sorted(Empty2),
    is_sorted(Flat2)
.


