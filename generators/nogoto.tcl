namespace eval nogoto {

array set debug_paths {}

variable structures_built 0
variable g_stack {}

# Autogenerated with DRAKON Editor 1.10

proc append_trucks { trucks item } {
    #item 1763
    set result {}
    #item 17650001
    set _col1765 $trucks
    set _len1765 [ llength $_col1765 ]
    set _ind1765 0
    while { 1 } {
        #item 17650002
        if {$_ind1765 < $_len1765} {
            #item 17650004
            set truck [ lindex $_col1765 $_ind1765 ]
            #item 2462
            set stack [ get_truck_stack $truck ]
            set links [ get_truck_links $truck ]
            #item 1766
            lappend stack $item
            set ntruck [ create_truck $stack $links ]
            lappend result $ntruck
            #item 17650003
            incr _ind1765
            continue
        } else {
            break
        }
    }
    #item 1764
    return $result
}

proc build_start { db item_id } {
    #item 651
    set nodes [ $db eval {
    	select item_id
    	from nodes
    } ]
    #item 652
    set incount {}
    #item 6530001
    set _col653 $nodes
    set _len653 [ llength $_col653 ]
    set _ind653 0
    while { 1 } {
        #item 6530002
        if {$_ind653 < $_len653} {
            #item 6530004
            set item [ lindex $_col653 $_ind653 ]
            #item 655
            set count [ $db onecolumn {
            	select incount
            	from nodes
            	where item_id = :item } ]
            #item 656
            set counter [ create_ncounter $item $count {} ]
            lappend incount $item $counter
            #item 6530003
            incr _ind653
            continue
        } else {
            break
        }
    }
    #item 459
    set point [ create_point $item_id {} {} 1 ]
    set points [ list $point ]
    #item 460
    set remaining [ node_count $db ]
    #item 554
    set tree [ create_seq ]
    #item 427
    set result [ create_state $tree $points $remaining 0 {} $incount $nodes ]
    return $result
}

proc build_structures { } {
    #item 437
    variable structures_built
    #item 438
    if {$structures_built} {
        
    } else {
        #item 445
        set structures_built 1
        #item 441
        generate_structure state {
        	tree
        	points
        	remaining
        	passed
        	parents
        	incount
        	nodes
        }
        #item 442
        generate_structure point {item_id path stack phase}
        #item 636
        generate_structure parent {item_id value type path}
        #item 446
        generate_structure tar {tree position}
        #item 675
        generate_structure ncounter { item_id count waiting }
    }
}

proc calc_incount { db } {
    #item 2471
    set nodes [ $db eval {
    	select item_id
    	from nodes
    } ]
    #item 24720001
    set _col2472 $nodes
    set _len2472 [ llength $_col2472 ]
    set _ind2472 0
    while { 1 } {
        #item 24720002
        if {$_ind2472 < $_len2472} {
            #item 24720004
            set item_id [ lindex $_col2472 $_ind2472 ]
            #item 2474
            set count [ $db onecolumn {
            	select count(*)
            	from links
            	where dst = :item_id and link_type = 'normal' } ]
            #item 2475
            $db eval {
            	update nodes
            	set incount = :count
            	where item_id = :item_id
            }
            #item 24720003
            incr _ind2472
            continue
        } else {
            break
        }
    }
}

proc calculate_incoming { db workdb start_item } {
    #item 1628
    init_preprocess $db
    #item 1892
    find_leaves $db $start_item
    #item 1617
    set start_truck [ create_truck {} {} ]
    set trucks [ list $start_truck ]
    set start [ create_prepoint $start_item $trucks ]
    #item 2117
    calculate_incoming_kernel $db $workdb $start {}
    #item 1790
    incount_from_incoming $db
}

proc calculate_incoming_kernel { db workdb item prev } {
    #item 2100
    set trucks [ get_prepoint_trucks $item ]
    set item_id [ get_prepoint_item_id $item ]
    #item 2103
    set otrucks [ get_node_trucks $db $item_id ]
    #item 2104
    set ntrucks [ merge_trucks $db $otrucks $trucks ]
    #item 2343
    set_node_trucks $db $item_id $ntrucks
    #item 2102
    decr_node_incount $db $item_id
    #item 2488
    if { 0 } {
    	puts "\nitem_id; $item_id"
    	puts "incount:[ get_node_incount $db $item_id ]"
    	puts "trucks: $trucks"
    	puts "otrucks: $otrucks"
    	puts "ntrucks: $ntrucks"
    }
    #item 2105
    if {[ get_node_incount $db $item_id ] <= 0} {
        #item 2344
        set clones [ clone_node $db $workdb $item_id $ntrucks ]
        #item 21300000
        set _sw21300000_ [ get_node_type $db $item_id ]
        #item 21300001
        if {$_sw21300000_ == "action"} {
            #item 2345
            set link_id [ find_link $db $item_id 0 ]
            #item 2353
            if {$link_id == ""} {
                
            } else {
                #item 2356
                set link_type [ get_link_type $db $link_id ]
                #item 2357
                if {$link_type == "up"} {
                    #item 2363
                    set dst [ get_link_dst $db $link_id ]
                    #item 23610001
                    set _col2361 $clones
                    set _len2361 [ llength $_col2361 ]
                    set _ind2361 0
                    while { 1 } {
                        #item 23610002
                        if {$_ind2361 < $_len2361} {
                            #item 23610004
                            set clone [ lindex $_col2361 $_ind2361 ]
                            #item 2359
                            set loop_id [ find_my_loop $workdb $clone $dst ]
                            #item 2360
                            insert_link $workdb $clone 0 $loop_id "up"
                            #item 23610003
                            incr _ind2361
                            continue
                        } else {
                            break
                        }
                    }
                } else {
                    #item 2142
                    set next_id [ get_link_dst $db $link_id ]
                    #item 2364
                    set next_trucks [ continue_trucks $ntrucks $clones 0 ]
                    #item 2140
                    set new_item [ create_prepoint $next_id $next_trucks ]
                    calculate_incoming_kernel $db $workdb $new_item $prev
                }
            }
        } else {
            #item 21300002
            if {$_sw21300000_ == "loop"} {
                #item 2139
                lappend prev $item_id
                #item 2345
                set link_id [ find_link $db $item_id 0 ]
                #item 2353
                if {$link_id == ""} {
                    
                } else {
                    #item 2356
                    set link_type [ get_link_type $db $link_id ]
                    #item 2357
                    if {$link_type == "up"} {
                        #item 2363
                        set dst [ get_link_dst $db $link_id ]
                        #item 23610001
                        set _col2361 $clones
                        set _len2361 [ llength $_col2361 ]
                        set _ind2361 0
                        while { 1 } {
                            #item 23610002
                            if {$_ind2361 < $_len2361} {
                                #item 23610004
                                set clone [ lindex $_col2361 $_ind2361 ]
                                #item 2359
                                set loop_id [ find_my_loop $workdb $clone $dst ]
                                #item 2360
                                insert_link $workdb $clone 0 $loop_id "up"
                                #item 23610003
                                incr _ind2361
                                continue
                            } else {
                                break
                            }
                        }
                    } else {
                        #item 2142
                        set next_id [ get_link_dst $db $link_id ]
                        #item 2364
                        set next_trucks [ continue_trucks $ntrucks $clones 0 ]
                        #item 2140
                        set new_item [ create_prepoint $next_id $next_trucks ]
                        calculate_incoming_kernel $db $workdb $new_item $prev
                    }
                }
            } else {
                #item 21300003
                if {$_sw21300000_ == "if"} {
                    
                } else {
                    #item 21300004
                    error "Unexpected switch value: $_sw21300000_"
                }
                #item 2136
                set node0 [ get_next_node $db $item_id 0 ]
                set node1 [ get_next_node $db $item_id 1 ]
                #item 2137
                set leaves0 [ get_node_leaves $db $node0 ]
                set leaves1 [ get_node_leaves $db $node1 ]
                #item 2209
                set ntrucks_long [ append_trucks $ntrucks $item_id ]
                #item 2234
                set prev0 $prev
                set prev1 $prev
                #item 2143
                if {[ direct_to_continue $leaves0 $prev ]} {
                    #item 2206
                    if {[ direct_to_continue $leaves1 $prev ]} {
                        #item 2239
                        increment_trucks $db $ntrucks_long
                        #item 2205
                        set ntrucks0 $ntrucks_long
                        #item 2210
                        set ntrucks1 $ntrucks_long
                    } else {
                        #item 2509
                        incr_node_outgoing $db $item_id
                        #item 2211
                        set ntrucks0 $ntrucks_long
                        #item 2212
                        set ntrucks1 $ntrucks
                        #item 2230
                        if {[ loop_exit $leaves1 $prev ]} {
                            #item 2235
                            set prev1 [ lreplace $prev end end ]
                        } else {
                            
                        }
                    }
                } else {
                    #item 2145
                    if {[ direct_to_continue $leaves1 $prev ]} {
                        #item 2510
                        incr_node_outgoing $db $item_id
                        #item 2216
                        set ntrucks0 $ntrucks
                        #item 2215
                        set ntrucks1 $ntrucks_long
                        #item 2232
                        if {[ loop_exit $leaves0 $prev ]} {
                            #item 2236
                            set prev0 [ lreplace $prev end end ]
                        } else {
                            
                        }
                    } else {
                        #item 2149
                        increment_trucks $db $ntrucks_long
                        #item 2213
                        set ntrucks0 $ntrucks_long
                        #item 2214
                        set ntrucks1 $ntrucks_long
                    }
                }
                #item 2371
                set next_trucks0 [ continue_trucks $ntrucks0 $clones 0 ]
                #item 2372
                set next_trucks1 [ continue_trucks $ntrucks1 $clones 1 ]
                #item 2158
                set new_item0 [ create_prepoint $node0 $next_trucks0 ]
                calculate_incoming_kernel $db $workdb $new_item0 $prev0
                #item 2159
                set new_item1 [ create_prepoint $node1 $next_trucks1 ]
                calculate_incoming_kernel $db $workdb $new_item1 $prev1
            }
        }
    } else {
        
    }
}

proc can_put_break { db parents_map incounts_map stack item_id } {
    #item 980
    upvar 1 $parents_map parents
    upvar 1 $incounts_map incounts
    #item 985
    set loop_pos [ find_last_stack_loop parents $stack ]
    #item 990
    if {$loop_pos == -1} {
        #item 996
        set result -1
    } else {
        #item 991
        set loop_item_id [ lindex $stack $loop_pos ]
        set value [ get_parent_value $parents($loop_item_id) ]
        #item 993
        if {$value == 0} {
            #item 999
            set length [ llength $stack ]
            set last [ expr { $length - 1 } ]
            #item 1000
            if {$loop_pos == $last} {
                #item 996
                set result -1
            } else {
                #item 1969
                set incount [ get_node_incount $db $item_id ]
                #item 1970
                if {($incount > 1) || ([ is_if_child $db $item_id ])} {
                    #item 992
                    set result $loop_pos
                } else {
                    #item 1967
                    set result -1
                }
            }
        } else {
            #item 996
            set result -1
        }
    }
    #item 998
    return $result
}

proc check_loops_ok { parents_map left_stack right_stack } {
    #item 932
    if {$left_stack == $right_stack} {
        #item 935
        return 1
    } else {
        #item 897
        upvar 1 $parents_map parents
        #item 895
        set left [ extract_stack_loops parents $left_stack ]
        set right [ extract_stack_loops parents $right_stack ]
        #item 896
        return [ expr { $left == $right } ]
    }
}

proc clean_stack { parents_map point } {
    #item 1406
    upvar 1 $parents_map parents
    #item 1411
    set zeroed_out {}
    set remaining {}
    set mystack [ get_point_stack $point ]
    #item 14180001
    set _col1418 $mystack
    set _len1418 [ llength $_col1418 ]
    set _ind1418 0
    while { 1 } {
        #item 14180002
        if {$_ind1418 < $_len1418} {
            #item 14180004
            set step [ lindex $_col1418 $_ind1418 ]
            #item 1419
            set parent $parents($step)
            set type [ get_parent_type $parent ]
            #item 1420
            if {$type == "if"} {
                #item 1407
                set count [ get_parent_value $parent ]
                #item 1408
                if {$count <= 1} {
                    #item 1412
                    lappend zeroed_out $step
                } else {
                    #item 1410
                    lappend remaining $step
                }
            } else {
                #item 1410
                lappend remaining $step
            }
            #item 14180003
            incr _ind1418
            continue
        } else {
            break
        }
    }
    #item 1413
    if {[ llength $zeroed_out ] == 0} {
        #item 1431
        set new_path [ get_point_path $point ]
    } else {
        #item 1416
        set parent_id [ lindex $zeroed_out 0 ]
        set new_path [ get_parent_path $parents($parent_id) ]
    }
    #item 1433
    set point [ set_point_stack $point $remaining ]
    set point [ set_point_path $point $new_path ]
    #item 1434
    return $point
}

proc clear_dangling { db } {
    #item 2005
    set links [ $db eval {
    	select link_id
    	from links } ]
    #item 20060001
    set _col2006 $links
    set _len2006 [ llength $_col2006 ]
    set _ind2006 0
    while { 1 } {
        #item 20060002
        if {$_ind2006 < $_len2006} {
            #item 20060004
            set link_id [ lindex $_col2006 $_ind2006 ]
            #item 2008
            set dst [ get_link_dst $db $link_id ]
            #item 2009
            set count [ $db onecolumn {
            	select count(*)
            	from nodes
            	where item_id = :dst } ]
            #item 2010
            if {$count == 0} {
                
            } else {
                
            }
            #item 20060003
            incr _ind2006
            continue
        } else {
            break
        }
    }
}

proc clear_marked { db } {
    #item 249
    $db eval {
    	update nodes
    	set marked = 0;
    }
}

proc clone_node { db workdb item_id trucks } {
    #item 2419
    set clones {}
    #item 23790001
    set _col2379 $trucks
    set _len2379 [ llength $_col2379 ]
    set _ind2379 0
    while { 1 } {
        #item 23790002
        if {$_ind2379 < $_len2379} {
            #item 23790004
            set truck [ lindex $_col2379 $_ind2379 ]
            #item 2382
            set type [ get_node_type $db $item_id ]
            set dummy [ is_node_dummy $db $item_id ]
            set text [ get_node_text $db $item_id ]
            #item 2413
            set clone [ mod::next_key $workdb nodes item_id ]
            #item 2421
            lappend clones $clone
            #item 2414
            insert_node $workdb $clone $type $text
            set_node_dummy $workdb $clone $dummy
            set_node_real $workdb $clone $item_id
            #item 2381
            set links [ get_truck_links $truck ]
            #item 24150001
            set _col2415 $links
            set _len2415 [ llength $_col2415 ]
            set _ind2415 0
            while { 1 } {
                #item 24150002
                if {$_ind2415 < $_len2415} {
                    #item 24150004
                    set link [ lindex $_col2415 $_ind2415 ]
                    #item 2417
                    set ordinal [ get_tlink_ordinal $link ]
                    set prev [ get_tlink_prev $link ]
                    #item 2418
                    insert_link $workdb $prev $ordinal $clone "normal"
                    #item 24150003
                    incr _ind2415
                    continue
                } else {
                    break
                }
            }
            #item 23790003
            incr _ind2379
            continue
        } else {
            break
        }
    }
    #item 2420
    return $clones
}

proc collapse_trucks { db trucks } {
    #item 2496
    set result {}
    #item 24940001
    set _col2494 $trucks
    set _len2494 [ llength $_col2494 ]
    set _ind2494 0
    while { 1 } {
        #item 24940002
        if {$_ind2494 < $_len2494} {
            #item 24940004
            set truck [ lindex $_col2494 $_ind2494 ]
            #item 2498
            set stack [ get_truck_stack $truck ]
            set links [ get_truck_links $truck ]
            #item 2500
            set nstack {}
            #item 24990001
            set _col2499 $stack
            set _len2499 [ llength $_col2499 ]
            set _ind2499 0
            while { 1 } {
                #item 24990002
                if {$_ind2499 < $_len2499} {
                    #item 24990004
                    set item_id [ lindex $_col2499 $_ind2499 ]
                    #item 2501
                    if {[ get_node_outgoing $db $item_id ] <= 1} {
                        
                    } else {
                        #item 2504
                        lappend nstack $item_id
                    }
                    #item 24990003
                    incr _ind2499
                    continue
                } else {
                    break
                }
            }
            #item 2505
            set ntruck [ create_truck $nstack $links ]
            #item 2506
            lappend result $ntruck
            #item 24940003
            incr _ind2494
            continue
        } else {
            break
        }
    }
    #item 2497
    return $result
}

proc continue_trucks { trucks clones ordinal } {
    #item 2427
    set ntrucks {}
    #item 2430
    set count [ llength $trucks ]
    #item 24290001
    set i 0
    while { 1 } {
        #item 24290002
        if {$i < $count} {
            #item 2432
            set clone [ lindex $clones $i ]
            set truck [ lindex $trucks $i ]
            set stack [ get_truck_stack $truck ]
            #item 2433
            set link [ create_tlink $clone $ordinal ]
            #item 2434
            set links [ list $link ]
            set ntruck [ create_truck $stack $links ]
            lappend ntrucks $ntruck
            #item 24290003
            incr i
            continue
        } else {
            break
        }
    }
    #item 2428
    return $ntrucks
}

proc create_db { db } {
    #item 403
    global script_path
    #item 402
    catch {
    	$db close
    }
    sqlite3 $db :memory:
    #item 404
    set filename $script_path/generators/nogoto.sql
    set init_sql [ read_all_text $filename ]
    $db eval $init_sql
    #item 457
    build_structures
    #item 1480
    init_debug
}

proc create_if { condition_item } {
    #item 452
    set then [ create_seq ]
    set else [ create_seq ]
    
    return [ list "if" $condition_item $then $else ]
}

proc create_loop { } {
    #item 1355
    return [ list "loop" ]
}

proc create_prepoint { item_id trucks } {
    #item 1603
    return [ list $item_id $trucks ]
}

proc create_seq { } {
    #item 456
    return [ list "seq" ]
}

proc create_tlink { prev ordinal } {
    #item 2316
    return [ list $prev $ordinal ]
}

proc create_truck { stack links } {
    #item 2246
    return [ list $stack $links ]
}

proc decr_node_incount { db item_id } {
    #item 1640
    $db eval {
    	update nodes
    	set incount = incount - 1
    	where item_id = :item_id
    }
}

proc decr_node_outgoing { db item_id } {
    #item 1672
    $db eval {
    	update nodes
    	set outgoing = outgoing - 1
    	where item_id = :item_id
    }
}

proc direct_to_continue { leaves prev } {
    #item 2165
    if {([ llength $prev ] == 0) || (!([ llength $leaves ] == 1))} {
        #item 2171
        return 0
    } else {
        #item 2167
        set last [ lindex $prev end ]
        set leaf [ lindex $leaves 0 ]
        #item 2168
        return [ expr { $last == $leaf } ]
    }
}

proc extract_stack_loops { parents_map stack } {
    #item 914
    upvar 1 $parents_map parents
    #item 912
    set i 0
    set result {}
    #item 9240001
    set _col924 $stack
    set _len924 [ llength $_col924 ]
    set _ind924 0
    while { 1 } {
        #item 9240002
        if {$_ind924 < $_len924} {
            #item 9240004
            set item_id [ lindex $_col924 $_ind924 ]
            #item 915
            set type [ get_parent_type $parents($item_id) ]
            #item 927
            if {$type == "loop"} {
                #item 930
                lappend result $i $item_id
            } else {
                
            }
            #item 926
            incr i
            #item 9240003
            incr _ind924
            continue
        } else {
            break
        }
    }
    #item 931
    return $result
}

proc find_incoming_links { db item_id } {
    #item 306
    return [ $db eval {
    	select link_id
    	from links
    	where dst = :item_id } ]
}

proc find_incoming_normal_links { db item_id } {
    #item 2450
    return [ $db eval {
    	select link_id
    	from links
    	where dst = :item_id and link_type = 'normal' } ]
}

proc find_last_stack_loop { parents_map stack } {
    #item 951
    upvar 1 $parents_map parents
    #item 952
    set i [ llength $stack ]
    while { 1 } {
        #item 955
        incr i -1
        #item 953
        if {$i >= 0} {
            #item 957
            set item_id [ lindex $stack $i ]
            set type [ get_parent_type $parents($item_id) ]
            #item 958
            if {$type == "loop"} {
                break
            } else {
                continue
            }
        } else {
            break
        }
    }
    #item 960
    return $i
}

proc find_leaves { db item_id } {
    #item 1848
    set leaves [ get_node_leaves $db $item_id ]
    #item 1849
    if {$leaves == ""} {
        #item 1854
        set links [ find_outgoing_links $db $item_id ]
        set count [ llength $links ]
        #item 18550001
        if {$count == 0} {
            #item 1862
            set leaves [ list 0 ]
        } else {
            #item 18550002
            if {$count == 1} {
                #item 1866
                set link_id [ lindex $links 0 ]
                #item 1885
                set leaves [ find_leaves_for_link $db $link_id ]
                #item 1889
                set type [ get_node_type $db $item_id ]
                #item 1888
                if {$type == "if"} {
                    #item 1891
                    lappend leaves 0
                } else {
                    
                }
            } else {
                #item 18550003
                if {$count == 2} {
                    
                } else {
                    #item 18550004
                    error "Unexpected switch value: $count"
                }
                #item 1867
                set link0 [ lindex $links 0 ]
                set link1 [ lindex $links 1 ]
                #item 1886
                set leaves0 [ find_leaves_for_link $db $link0 ]
                set leaves1 [ find_leaves_for_link $db $link1 ]
                #item 1887
                set all_leaves [ concat $leaves0 $leaves1 ]
                set leaves [ lsort -dictionary -unique $all_leaves ]
            }
        }
        #item 2077
        if {[ get_node_type $db $item_id ] == "loop"} {
            #item 2080
            set leaves [ remove $leaves $item_id ]
        } else {
            
        }
        #item 1851
        set_node_leaves $db $item_id $leaves
    } else {
        
    }
    #item 1850
    return $leaves
}

proc find_leaves_for_link { db link_id } {
    #item 1880
    set link_type [ get_link_type $db $link_id ]
    #item 1878
    set next [ get_link_dst $db $link_id ]
    #item 1881
    if {$link_type == "up"} {
        #item 1884
        set leaves [ list $next ]
    } else {
        #item 1879
        set leaves [ find_leaves $db $next ]
    }
    #item 1877
    return $leaves
}

proc find_link { db src ordinal } {
    #item 2351
    set link_id [ $db onecolumn {
    	select link_id
    	from links
    	where src = :src
    		and ordinal = :ordinal } ]
    #item 2352
    return $link_id
}

proc find_loop_starts { db } {
    #item 291
    return [ $db eval {
    	select dst
    	from links
    	where link_type = 'up'
    	group by dst
    } ]
}

proc find_my_loop { db clone dst } {
    #item 2441
    set real [ get_node_real $db $clone ]
    #item 2442
    if {$real == $dst} {
        #item 2443
        set result $clone
    } else {
        #item 2451
        set incoming_links \
        	[ find_incoming_normal_links $db $clone ]
        #item 24520001
        set _col2452 $incoming_links
        set _len2452 [ llength $_col2452 ]
        set _ind2452 0
        while { 1 } {
            #item 24520002
            if {$_ind2452 < $_len2452} {
                #item 24520004
                set link_id [ lindex $_col2452 $_ind2452 ]
                #item 2455
                set prev [ get_link_src $db $link_id ]
                #item 2456
                set found [ find_my_loop $db $prev $dst ]
                #item 2457
                if {$found == 0} {
                    #item 24520003
                    incr _ind2452
                    continue
                } else {
                    #item 2460
                    set result $found
                    break
                }
            } else {
                #item 2459
                set result 0
                break
            }
        }
    }
    #item 2461
    return $result
}

proc find_next_incoming { db state point } {
    #item 1063
    array set parents [ get_state_parents $state ]
    array set incounts [ get_state_incount $state ]
    set points [ get_state_points $state ]
    #item 1061
    set item_id [ get_point_item_id $point ]
    #item 1064
    set counter $incounts($item_id)
    set count [ get_ncounter_count $counter ]
    set waiting [ get_ncounter_waiting $counter ]
    incr count -1
    #item 1066
    set waiting2 [ meet parents $waiting $point ]
    #item 1135
    if {$waiting2 == "error"} {
        #item 1138
        return {}
    } else {
        #item 1067
        set incounts($item_id) [ create_ncounter \
        	$item_id $count $waiting2 ]
        #item 1989
        set parents2 [ array get parents ]
        set state [ set_state_parents $state $parents2 ]
        #item 1068
        if {$count <= 0} {
            #item 1262
            set incounts2 [ array get incounts ]
            set state [ set_state_incount $state $incounts2 ]
            #item 11040000
            set _sw11040000_ [ llength $waiting2 ]
            #item 11040001
            if {$_sw11040000_ == 0} {
                #item 1111
                set path {}
                set stack {}
                #item 1261
                set point [ create_point $item_id $path $stack 2 ]
                #item 1260
                return [ find_next_outgoing $db $state $point ]
            } else {
                #item 11040002
                if {$_sw11040000_ == 1} {
                    #item 1113
                    set p2 [ lindex $waiting2 0 ]
                    #item 1112
                    set path [ get_point_path $p2 ]
                    set stack [ get_point_stack $p2 ]
                    #item 1261
                    set point [ create_point $item_id $path $stack 2 ]
                    #item 1260
                    return [ find_next_outgoing $db $state $point ]
                } else {
                    #item 1126
                    set points [ concat $points $waiting2 ]
                    set state [ set_state_points $state $points ]
                    #item 1073
                    return [ list $state ]
                }
            }
        } else {
            #item 1990
            set incounts2 [ array get incounts ]
            set state [ set_state_incount $state $incounts2 ]
            #item 1955
            return [ list $state ]
        }
    }
}

proc find_next_outgoing { db state point } {
    #item 1152
    set tree [ get_state_tree $state ]
    set points [ get_state_points $state ]
    set remaining [ get_state_remaining $state ]
    set passed [ get_state_passed $state ]
    array set parents [ get_state_parents $state ]
    array set incounts [ get_state_incount $state ]
    set nodes [ get_state_nodes $state ]
    #item 1150
    set item_id [ get_point_item_id $point ]
    set path [ get_point_path $point ]
    set stack [ get_point_stack $point ]
    #item 2479
    set real [ get_node_real $db $item_id ]
    #item 1158
    set nodes [ remove $nodes $item_id ]
    set remaining [ llength $nodes ]
    incr passed
    #item 1217
    if {($remaining == 0) && (!($stack == ""))} {
        #item 1223
        set result {}
    } else {
        #item 1166
        set type [ get_node_type $db $item_id ]
        #item 11670001
        if {$type == "action"} {
            #item 2041
            if {[ is_node_dummy $db $item_id ]} {
                
            } else {
                #item 1172
                unpack [ tree_append $tree $path $real ] \
                	tree pos
            }
            #item 1348
            set pt [ try_create_point $db parents $points $tree \
            	$item_id 0 $path $stack ]
            #item 2055
            if {$pt == ""} {
                #item 2058
                set result {}
            } else {
                #item 2054
                unpack $pt points tree
                #item 1185
                set state2 [ create_state \
                	$tree \
                	$points \
                	$remaining \
                	$passed \
                	[ array get parents ] \
                	[ array get incounts ] \
                	$nodes ]
                set result [ list $state2 ]
            }
        } else {
            #item 11670002
            if {$type == "if"} {
                #item 1173
                set ifnode [ create_if $real ]
                unpack [ tree_append $tree $path $ifnode ] \
                	tree pos
                #item 1174
                set then_path $path
                lappend then_path $pos 2
                #item 1175
                set else_path $path
                lappend else_path $pos 3
                #item 1176
                set ifasparent [ create_parent $item_id 2 "if" $path ]
                set parents($item_id) $ifasparent
                #item 1177
                split_parents parents $stack
                lappend stack $item_id
                #item 1350
                unpack [ try_create_point $db parents $points $tree \
                	$item_id 0 $then_path $stack ] points tree
                #item 1351
                unpack [ try_create_point $db parents $points $tree \
                	$item_id 1 $else_path $stack ] points tree
            } else {
                #item 11670003
                if {$type == "loop"} {
                    
                } else {
                    #item 11670004
                    error "Unexpected switch value: $type"
                }
                #item 1356
                set loopnode [ create_loop ]
                unpack [ tree_append $tree $path $loopnode ] \
                	tree pos
                #item 1358
                set value [ get_incoming_up_count $db $item_id ]
                #item 1365
                set loopparent [ create_parent $item_id $value "loop" $path ]
                set parents($item_id) $loopparent
                lappend stack $item_id
                #item 1357
                lappend path $pos
                #item 1366
                unpack [ try_create_point $db parents $points $tree \
                	$item_id 0 $path $stack ] points tree
            }
            #item 1185
            set state2 [ create_state \
            	$tree \
            	$points \
            	$remaining \
            	$passed \
            	[ array get parents ] \
            	[ array get incounts ] \
            	$nodes ]
            set result [ list $state2 ]
        }
    }
    #item 2053
    return $result
}

proc find_next_states { db state0 } {
    #item 696
    set result {}
    #item 695
    set points [ get_state_points $state0 ]
    set points_count [ llength $points ]
    #item 7060001
    set point_id 0
    while { 1 } {
        #item 7060002
        if {$point_id < $points_count} {
            #item 700
            set states [ find_next_states_point $db $state0 $point_id ]
            #item 705
            set result [ concat $result $states ]
            #item 7060003
            incr point_id
            continue
        } else {
            break
        }
    }
    #item 697
    return $result
}

proc find_next_states_point { db state point_id } {
    #item 1230
    set parents_map [ get_state_parents $state ]
    set incounts_map [ get_state_incount $state ]
    
    array set parents $parents_map
    array set incounts $incounts_map
    #item 659
    set points [ get_state_points $state ]
    set point [ lindex $points $point_id ]
    #item 1229
    set points [ lreplace $points $point_id $point_id ]
    set state [ set_state_points $state $points ]
    #item 826
    if {[ get_point_phase $point ] == 2} {
        #item 853
        set result [ find_next_outgoing $db $state $point ]
    } else {
        #item 829
        set point [ set_point_phase $point 2 ]
        #item 1232
        set item_id [ get_point_item_id $point ]
        set path [ get_point_path $point ]
        set stack [ get_point_stack $point ]
        #item 1231
        set loop_pos [ can_put_break $db parents incounts $stack $item_id ]
        #item 1234
        if {$loop_pos == -1} {
            #item 1244
            set result [ find_next_incoming $db $state $point ]
        } else {
            #item 1236
            set loop_parent_id [ lindex $stack $loop_pos ]
            set loop_parent $parents($loop_parent_id)
            #item 1238
            set existing_br_item [ get_parent_break $loop_parent ]
            #item 1237
            if {$existing_br_item == ""} {
                #item 1242
                set parents($loop_parent_id) \
                	[ set_parent_break $loop_parent $item_id ]
                #item 1246
                set tree [ get_state_tree $state ]
                #item 1250
                unpack [ tree_append $tree $path break ] \
                	tree2 pos
                #item 1251
                set parents2 [ array get parents ]
                set state2 $state
                set state2 [ set_state_parents $state2 $parents2 ]
                set state2 [ set_state_tree $state2 $tree2 ]
                #item 1253
                set loop_path [ get_parent_path $loop_parent ]
                set short_stack [ lreplace $stack $loop_pos $loop_pos ]
                #item 1252
                set point2 [ create_point $item_id $loop_path $short_stack 2]
                #item 1254
                set result1 [ find_next_incoming $db $state $point ]
                #item 1255
                set result2 [ find_next_incoming $db $state2 $point2 ]
                #item 1256
                set result [ concat $result1 $result2 ]
            } else {
                #item 1240
                if {$existing_br_item == $item_id} {
                    #item 1246
                    set tree [ get_state_tree $state ]
                    #item 1250
                    unpack [ tree_append $tree $path break ] \
                    	tree2 pos
                    #item 1251
                    set parents2 [ array get parents ]
                    set state2 $state
                    set state2 [ set_state_parents $state2 $parents2 ]
                    set state2 [ set_state_tree $state2 $tree2 ]
                    #item 1253
                    set loop_path [ get_parent_path $loop_parent ]
                    set short_stack [ lreplace $stack $loop_pos $loop_pos ]
                    #item 1252
                    set point2 [ create_point $item_id $loop_path $short_stack 2]
                    #item 1254
                    set result1 [ find_next_incoming $db $state $point ]
                    #item 1255
                    set result2 [ find_next_incoming $db $state2 $point2 ]
                    #item 1256
                    set result [ concat $result1 $result2 ]
                } else {
                    #item 1244
                    set result [ find_next_incoming $db $state $point ]
                }
            }
        }
    }
    #item 1257
    return $result
}

proc find_outgoing_links { db item_id } {
    #item 244
    return [ $db eval {
    	select link_id
    	from links
    	where src = :item_id } ]
}

proc find_outgoing_nodes { db item_id } {
    #item 1549
    set result [ $db eval {
    	select dst
    	from links
    	where src = :item_id and link_type = 'normal' } ]
    #item 1550
    return $result
}

proc generate { db start_item } {
    variable g_stack
    set g_stack {}
    #item 1807
    set dummy 88888
    insert_dummy $db $dummy $start_item
    #item 503
    clear_marked $db
    #item 502
    mark_backward_links $db 0 $dummy {}
    #item 504
    insert_loops $db
    #item 2465
    set workdb "${db}_work"
    create_db $workdb
    #item 1796
    calculate_incoming $db $workdb $dummy
    #item 2477
    calc_incount $workdb
    #item 2478
    set start_id [ $workdb onecolumn {
    	select item_id
    	from nodes
    	where real_item = :dummy } ]
    #item 2240
    if { 0 } {
    print_nodes $workdb
    }
    #item 499
    set start_state [ build_start $workdb $start_id ]
    push $workdb $start_state
    #item 2065
    set counter 0
    
    set _next_item_ 2066
    while { 1 } {
        if {$_next_item_ == 2066} {
            incr counter
    
        #item 485
            if {[ stack_empty $workdb ]} {
                set _next_item_ 488
            } else {
                #item 479
                set current [ pop $workdb ]
                set tree [ get_state_tree $current ]
                set remaining [ get_state_remaining $current ]
                set _next_item_ 2068
            }
        }
    
        if {$_next_item_ == 2068} {
            if {[ should_give_up $current $counter ]} {
                #item 2067
                puts "giving up..."
                set _next_item_ 488
            } else {
                set _next_item_ 489
            }
        }
    
        if {$_next_item_ == 488} {
            set result ""
            set _next_item_ 493
        }
    
        if {$_next_item_ == 489} {
            if {$remaining == 0} {
                #item 1528
                print_tree_path $current
                #item 492
                set result [ remove_dummy $tree ]
                set _next_item_ 493
            } else {
                #item 481
                set next_states [ find_next_states $workdb $current ]
                #item 4820001
                set _col482 $next_states
                set _len482 [ llength $_col482 ]
                set _ind482 0
                set _next_item_ 4820002
            }
        }
    
        if {$_next_item_ == 493} {
            return $result
        }
    
        if {$_next_item_ == 4820002} {
            if {$_ind482 < $_len482} {
                #item 4820004
                set next_state [ lindex $_col482 $_ind482 ]
                #item 1839
                set key [ generate_state_key $next_state ]
                set _next_item_ 494
            } else {
                set _next_item_ 2066
                continue
            }
        }
    
        if {$_next_item_ == 494} {
            if {[ is_visited $workdb $key $next_state ]} {
                
            } else {
                #item 495
                visit $workdb $key $next_state
                #item 498
                push $workdb $next_state
                #item 1481
                record_edge $current $next_state
            }
    
        #item 4820003
            incr _ind482
            set _next_item_ 4820002
            continue
        }
    
    }
}

proc generate_body { gdb diagram_id start_item node_list items incoming callbacks } {
    #item 155
    if {[ llength $items ] == 0} {
        
    } else {
        #item 40
        reset_db
        #item 39
        array set nodes $node_list
        #item 430001
        set _col43 $items
        set _len43 [ llength $_col43 ]
        set _ind43 0
        while { 1 } {
            #item 430002
            if {$_ind43 < $_len43} {
                #item 430004
                set item_id [ lindex $_col43 $_ind43 ]
                #item 45
                set node $nodes($item_id)
                #item 46
                create_node $item_id $node
                #item 430003
                incr _ind43
                continue
            } else {
                break
            }
        }
        #item 92
        clear_marked
        #item 81
        add_backward_links 0 $start_item {}
        #item 159
        insert_loops $start_item
        #item 154
        variable db
        set name [ $gdb onecolumn {
        	select name
        	from diagrams
        	where diagram_id = :diagram_id } ]
        puts \n\n$name\n
        print_table $db nodes
        print_table $db links
    }
    #item 59
    return ""
}

proc generate_state_key { state } {
    #item 1938
    set incounts [ get_state_incount $state ]
    set count [ llength $incounts ]
    #item 1939
    set result [ get_state_tree $state ]
    lappend result "|"
    #item 1945
    set incs {}
    #item 19400001
    set i 1
    while { 1 } {
        #item 19400002
        if {$i < $count} {
            #item 1942
            set ncounter [ lindex $incounts $i ]
            set item_id [ get_ncounter_item_id $ncounter ]
            set waiting [ get_ncounter_waiting $ncounter ]
            #item 1947
            if {[ llength $waiting ] > 0} {
                #item 1952
                set stacks {}
                #item 19500001
                set _col1950 $waiting
                set _len1950 [ llength $_col1950 ]
                set _ind1950 0
                while { 1 } {
                    #item 19500002
                    if {$_ind1950 < $_len1950} {
                        #item 19500004
                        set point [ lindex $_col1950 $_ind1950 ]
                        #item 1953
                        set stack [ get_point_stack $point ]
                        lappend stacks $stack
                        #item 19500003
                        incr _ind1950
                        continue
                    } else {
                        break
                    }
                }
                #item 1954
                set stacks [ lsort $stacks ]
                #item 1943
                lappend incs [ list $item_id $stacks ]
            } else {
                
            }
            #item 19400003
            incr i 2
            continue
        } else {
            break
        }
    }
    #item 1946
    set incs [ lsort $incs ]
    #item 1944
    return [ concat $result $incs ]
}

proc get_incoming_up_count { db item_id } {
    #item 1364
    set srcs [ $db eval {
    	select src
    	from links
    	where dst = :item_id and link_type = 'up' 
    	group by src
    } ]
    #item 2063
    set result 0
    #item 20600001
    set _col2060 $srcs
    set _len2060 [ llength $_col2060 ]
    set _ind2060 0
    while { 1 } {
        #item 20600002
        if {$_ind2060 < $_len2060} {
            #item 20600004
            set src [ lindex $_col2060 $_ind2060 ]
            #item 2062
            set incount [ get_node_incount $db $src ]
            set result [ expr { $result + $incount } ]
            #item 20600003
            incr _ind2060
            continue
        } else {
            break
        }
    }
    #item 2064
    return $result
}

proc get_incount { db item_id } {
    #item 1456
    set incount [ $db onecolumn {
    	select incount
    	from nodes
    	where item_id = :item_id } ]
    #item 1457
    return $incount
}

proc get_link_dst { db link_id } {
    #item 279
    return [ $db onecolumn {
    	select dst
    	from links
    	where link_id = :link_id } ]
}

proc get_link_ordinal { db link_id } {
    #item 2028
    return [ $db onecolumn {
    	select ordinal
    	from links
    	where link_id = :link_id } ]
}

proc get_link_src { db link_id } {
    #item 313
    return [ $db onecolumn {
    	select src
    	from links
    	where link_id = :link_id } ]
}

proc get_link_type { db link_id } {
    #item 333
    return [ $db onecolumn {
    	select link_type
    	from links
    	where link_id = :link_id } ]
}

proc get_linked_node { db item_id ordinal } {
    #item 740
    set result [ $db onecolumn {
    	select dst
    	from links
    	where src = :item_id and ordinal = :ordinal } ]
    #item 1994
    set count [ $db onecolumn { select count(*) from
    	nodes where item_id = :result } ]
    #item 1995
    if {$count == 0} {
        #item 1998
        set result ""
    } else {
        
    }
    #item 1993
    return $result
}

proc get_next_node { db src ordinal } {
    #item 2370
    return [ $db onecolumn {
    	select dst
    	from links
    	where src = :src and ordinal = :ordinal } ]
}

proc get_node_incount { db item_id } {
    #item 1634
    return [ $db onecolumn {
    	select incount
    	from nodes
    	where item_id = :item_id } ]
}

proc get_node_leaves { db item_id } {
    #item 1898
    return [ $db onecolumn {
    	select leaves
    	from nodes
    	where item_id = :item_id } ]
}

proc get_node_outgoing { db item_id } {
    #item 1722
    return [ $db onecolumn {
    	select outgoing
    	from nodes
    	where item_id = :item_id } ]
}

proc get_node_real { db item_id } {
    #item 2406
    return [ $db onecolumn {
    	select real_item
    	from nodes
    	where item_id = :item_id } ]
}

proc get_node_split { db item_id } {
    #item 2189
    return [ $db onecolumn {
    	select split
    	from nodes
    	where item_id = :item_id } ]
}

proc get_node_text { db item_id } {
    #item 2388
    return [ $db onecolumn {
    	select text_lines
    	from nodes
    	where item_id = :item_id } ]
}

proc get_node_trucks { db item_id } {
    #item 1652
    return [ $db onecolumn {
    	select trucks
    	from nodes
    	where item_id = :item_id } ]
}

proc get_node_type { db item_id } {
    #item 720
    return [ $db onecolumn {
    	select type
    	from nodes
    	where item_id = :item_id } ]
}

proc get_parent_break { parent } {
    #item 1045
    if {[ llength $parent ] > 4} {
        #item 1047
        return [ lindex $parent 4 ]
    } else {
        #item 1049
        return ""
    }
}

proc get_prepoint_item_id { point } {
    #item 1609
    return [ lindex $point 0 ]
}

proc get_prepoint_trucks { point } {
    #item 1615
    return [ lindex $point 1 ]
}

proc get_tlink_ordinal { tlink } {
    #item 2328
    return [ lindex $tlink 1 ]
}

proc get_tlink_prev { tlink } {
    #item 2322
    return [ lindex $tlink 0 ]
}

proc get_truck_links { truck } {
    #item 2258
    return [ lindex $truck 1 ]
}

proc get_truck_stack { truck } {
    #item 2252
    return [ lindex $truck 0 ]
}

proc incount_from_incoming { db } {
    #item 1789
    $db eval {
    	update nodes
    	set incount = incoming
    }
}

proc incr_node_incoming { db item_id amount } {
    #item 1792
    if {$amount == 0} {
        #item 1795
        set amount 1
    } else {
        
    }
    #item 1666
    $db eval {
    	update nodes
    	set incoming = incoming + :amount
    	where item_id = :item_id
    }
}

proc incr_node_outgoing { db item_id } {
    #item 1646
    $db eval {
    	update nodes
    	set outgoing = outgoing + 1
    	where item_id = :item_id
    }
}

proc increment_trucks { db trucks } {
    #item 24630001
    set _col2463 $trucks
    set _len2463 [ llength $_col2463 ]
    set _ind2463 0
    while { 1 } {
        #item 24630002
        if {$_ind2463 < $_len2463} {
            #item 24630004
            set truck [ lindex $_col2463 $_ind2463 ]
            #item 2464
            set stack [ get_truck_stack $truck ]
            #item 17780001
            set _col1778 $stack
            set _len1778 [ llength $_col1778 ]
            set _ind1778 0
            while { 1 } {
                #item 17780002
                if {$_ind1778 < $_len1778} {
                    #item 17780004
                    set step [ lindex $_col1778 $_ind1778 ]
                    #item 1781
                    incr_node_outgoing $db $step
                    #item 17780003
                    incr _ind1778
                    continue
                } else {
                    break
                }
            }
            #item 24630003
            incr _ind2463
            continue
        } else {
            break
        }
    }
}

proc init_debug { } {
    #item 1478
    variable debug_paths
    #item 1479
    array unset debug_paths
    array set debug_paths {}
}

proc init_preprocess { db } {
    #item 1627
    $db eval {
    	update nodes
    	set incoming = 0, outgoing = 1, trucks = ''
    }
}

proc insert_dummy { db dummy_id start } {
    #item 1804
    insert_node $db $dummy_id action {}
    #item 1806
    insert_link $db $dummy_id 0 $start normal
}

proc insert_link { db src ordinal dst link_type } {
    #item 418
    $db eval {
    	insert into links (src, ordinal, dst, link_type)
    	values (:src, :ordinal, :dst, :link_type)
    }
}

proc insert_loops { db } {
    #item 214
    set starts [ find_loop_starts $db ]
    #item 2150001
    set _col215 $starts
    set _len215 [ llength $_col215 ]
    set _ind215 0
    while { 1 } {
        #item 2150002
        if {$_ind215 < $_len215} {
            #item 2150004
            set item_id [ lindex $_col215 $_ind215 ]
            #item 217
            insert_node_before $db $item_id
            #item 2150003
            incr _ind215
            continue
        } else {
            break
        }
    }
    #item 2476
    calc_incount $db
}

proc insert_node { db item_id type text_lines } {
    #item 412
    $db eval {
    	insert into nodes (item_id, type, text_lines)
    	values (:item_id, :type, :text_lines)
    }
}

proc insert_node_before { db before_node } {
    #item 319
    set incoming [ find_incoming_links $db $before_node ]
    #item 320
    set item_id [ $db onecolumn {
    	select max(item_id)
    	from nodes } ]
    incr item_id
    #item 321
    insert_node $db $item_id loop {}
    #item 3230001
    set _col323 $incoming
    set _len323 [ llength $_col323 ]
    set _ind323 0
    while { 1 } {
        #item 3230002
        if {$_ind323 < $_len323} {
            #item 3230004
            set link_id [ lindex $_col323 $_ind323 ]
            #item 325
            set_link_dst $db $link_id $item_id
            #item 3230003
            incr _ind323
            continue
        } else {
            break
        }
    }
    #item 322
    insert_link $db $item_id 0 $before_node normal
}

proc is_if_child { db item_id } {
    #item 1984
    set links [ $db eval {
    	select link_id
    	from links
    	where dst = :item_id 
    		and link_type = 'normal'
    } ]
    #item 19800001
    set _col1980 $links
    set _len1980 [ llength $_col1980 ]
    set _ind1980 0
    while { 1 } {
        #item 19800002
        if {$_ind1980 < $_len1980} {
            #item 19800004
            set link_id [ lindex $_col1980 $_ind1980 ]
            #item 1982
            set src_item [ get_link_src $db $link_id ]
            set type [ get_node_type $db $src_item ]
            #item 1983
            if {$type == "if"} {
                #item 1986
                return 1
            } else {
                #item 19800003
                incr _ind1980
                continue
            }
        } else {
            #item 1985
            return 0
        }
    }
}

proc is_link_up { db src ordinal } {
    #item 1317
    set link_type [ $db onecolumn {
    	select link_type
    	from links
    	where src = :src and ordinal = :ordinal } ]
    #item 1318
    return [ expr { $link_type == "up" } ]
}

proc is_marked { db item_id } {
    #item 256
    set result [ $db onecolumn {
    	select marked
    	from nodes
    	where item_id = :item_id } ]
    #item 752
    if {$result == ""} {
        #item 753
        set count [ $db onecolumn {
        	select count(*)
        	from nodes
        	where item_id = :item_id } ]
        error "item_id: $item_id, found: $count. No marked value"
    } else {
        #item 751
        return $result
    }
}

proc is_node_dummy { db item_id } {
    #item 2034
    set dummy [ $db onecolumn {
    	select is_dummy
    	from nodes
    	where item_id = :item_id } ]
    
    return [ expr { $dummy == 1 } ]
}

proc is_visited { db key state } {
    #item 540
    set count [ $db onecolumn {
    	select count(*)
    	from visited
    	where key = :key
    } ]
    #item 1928
    if {$count == 10} {
        #item 1929
        puts "not found:"
        print_state $state
        #item 1932
        puts "old:"
        set old [ $db onecolumn {
        	select state from visited where key = :key } ]
        print_state $old
        puts ""
        puts "new:"
        print_state $state
        puts -----------------------------
    } else {
        
    }
    #item 1841
    return $count
}

proc join_parents { parents_map stack } {
    #item 1385
    upvar 1 $parents_map parents
    #item 13920001
    set _col1392 $stack
    set _len1392 [ llength $_col1392 ]
    set _ind1392 0
    while { 1 } {
        #item 13920002
        if {$_ind1392 < $_len1392} {
            #item 13920004
            set item_id [ lindex $_col1392 $_ind1392 ]
            #item 1386
            set parent $parents($item_id)
            #item 1388
            set type [ get_parent_type $parent ]
            #item 1389
            if {$type == "if"} {
                #item 1387
                set split [ get_parent_value $parent ]
                incr split -1
                set parents($item_id) [ set_parent_value $parent $split ]
            } else {
                
            }
            #item 13920003
            incr _ind1392
            continue
        } else {
            break
        }
    }
}

proc loop_exit { leaves prev } {
    #item 2222
    if {[ llength $prev ] == 0} {
        #item 2228
        return 0
    } else {
        #item 2224
        set last [ lindex $prev end ]
        #item 2229
        if {[ contains $leaves $last ]} {
            #item 2228
            return 0
        } else {
            #item 2225
            return 1
        }
    }
}

proc mark { db item_id } {
    #item 263
    $db onecolumn {
    	update nodes
    	set marked = 1
    	where item_id = :item_id
    }
}

proc mark_backward_links { db src_link_id item_id path } {
    #item 153
    if {$item_id == 0} {
        
    } else {
        #item 115
        if {[ is_marked $db $item_id ]} {
            #item 138
            if {[ contains $path $item_id ]} {
                #item 2014
                set dummy_id [ $db onecolumn {
                	select max(item_id)
                	from nodes } ]
                incr dummy_id
                #item 2015
                insert_node $db $dummy_id action {}
                set_node_dummy $db $dummy_id 1
                mark $db $dummy_id
                #item 2016
                set_link_dst $db $src_link_id $dummy_id
                insert_link $db $dummy_id 0 $item_id up
            } else {
                
            }
        } else {
            #item 116
            mark $db $item_id
            #item 117
            lappend path $item_id
            #item 125
            set outgoing [ find_outgoing_links $db $item_id ]
            #item 1330001
            set _col133 $outgoing
            set _len133 [ llength $_col133 ]
            set _ind133 0
            while { 1 } {
                #item 1330002
                if {$_ind133 < $_len133} {
                    #item 1330004
                    set link_id [ lindex $_col133 $_ind133 ]
                    #item 135
                    set dst [ get_link_dst $db $link_id ]
                    mark_backward_links $db $link_id $dst $path
                    #item 1330003
                    incr _ind133
                    continue
                } else {
                    break
                }
            }
        }
    }
}

proc mark_with_path { db nodes_map stack item_id op } {
    #item 1542
    upvar 1 $nodes_map nodes
    #item 1543
    if {[ info exists nodes($item_id) ]} {
        #item 1553
        set stacks $nodes($item_id)
    } else {
        #item 1566
        set stacks {}
    }
    #item 1554
    set contains_me [ contains $stacks $stack ]
    #item 1576
    lappend stacks $stack
    #item 1555
    if {$contains_me} {
        
    } else {
        #item 1556
        set outgoing [ find_outgoing_nodes $db $item_id ]
        #item 1557
        if {[ llength $outgoing ] > 1} {
            #item 1558
            lappend stack $item_id
        } else {
            
        }
        #item 15610001
        set _col1561 $outgoing
        set _len1561 [ llength $_col1561 ]
        set _ind1561 0
        while { 1 } {
            #item 15610002
            if {$_ind1561 < $_len1561} {
                #item 15610004
                set next [ lindex $_col1561 $_ind1561 ]
                #item 1563
                mark_with_path $db nodes $stack $next
                #item 15610003
                incr _ind1561
                continue
            } else {
                break
            }
        }
    }
}

proc meet { parents_map existing point } {
    #item 778
    upvar 1 $parents_map parents
    #item 1459
    set mypath [ get_point_path $point ]
    set point [ clean_stack parents $point ]
    set point [ set_point_path $point $mypath ]
    while { 1 } {
        #item 812
        unpack [ meet_once parents $existing $point ] \
        	existing2 point2
        #item 942
        if {$existing2 == "error"} {
            #item 943
            return "error"
        } else {
            #item 816
            set existing $existing2
            set point $point2
            #item 813
            if {$point == ""} {
                #item 815
                return $existing
            } else {
                continue
            }
        }
    }
}

proc meet_once { parents_map existing point } {
    upvar 1 $parents_map parents
    #item 795
    set mystack [ get_point_stack $point ]
    #item 8870001
    set _col887 $existing
    set _len887 [ llength $_col887 ]
    set _ind887 0
    
    set _next_item_ 8870002
    while { 1 } {
        if {$_next_item_ == 8870002} {
            if {$_ind887 < $_len887} {
                #item 8870004
                set epoint [ lindex $_col887 $_ind887 ]
                #item 889
                set estack [ get_point_stack $epoint ]
                set _next_item_ 936
            } else {
                #item 793
                set i 0
                #item 7910001
                set _col791 $existing
                set _len791 [ llength $_col791 ]
                set _ind791 0
                set _next_item_ 7910002
            }
        }
    
        if {$_next_item_ == 936} {
            if {[ check_loops_ok parents $mystack $estack ]} {
                #item 8870003
                incr _ind887
                set _next_item_ 8870002
                continue
            } else {
                #item 939
                set result "error"
                set _next_item_ 809
            }
        }
    
        if {$_next_item_ == 7910002} {
            if {$_ind791 < $_len791} {
                #item 7910004
                set epoint [ lindex $_col791 $_ind791 ]
                #item 789
                set estack [ get_point_stack $epoint ]
                set _next_item_ 796
            } else {
                #item 808
                lappend existing $point
                set result [ list $existing {} {} ]
                set _next_item_ 809
            }
        }
    
        if {$_next_item_ == 796} {
            if {$mystack == $estack} {
                #item 1458
                set found $i
                #item 1435
                join_parents parents $mystack
                #item 1436
                set old_path [ get_point_path $point ]
                set point [ clean_stack parents $point ]
                set new_path [ get_point_path $point ]
                set _next_item_ 1464
            } else {
                #item 794
                incr i
                #item 7910003
                incr _ind791
                set _next_item_ 7910002
                continue
            }
        }
    
        if {$_next_item_ == 1464} {
            if {[ llength $old_path ] < [ llength $new_path ]} {
                #item 1467
                set point [ set_point_path $point $old_path ]
            } else {
                
            }
    
        #item 806
            set result_points [ lreplace $existing $found $found ]
            set result [ list $result_points $point ]
            set _next_item_ 809
        }
    
        if {$_next_item_ == 809} {
            return $result
        }
    
    }
}

proc merge_one_truck { db otrucks truck } {
    #item 2298
    set stack [ get_truck_stack $truck ]
    #item 2300
    set count [ llength $otrucks ]
    #item 22970001
    set i 0
    while { 1 } {
        #item 22970002
        if {$i < $count} {
            #item 2299
            set otruck [ lindex $otrucks $i ]
            set ostack [ get_truck_stack $otruck ]
            #item 2301
            if {$stack == $ostack} {
                #item 2303
                set otrucks [ lreplace $otrucks $i $i ]
                #item 22780001
                set _col2278 $stack
                set _len2278 [ llength $_col2278 ]
                set _ind2278 0
                while { 1 } {
                    #item 22780002
                    if {$_ind2278 < $_len2278} {
                        #item 22780004
                        set item_id [ lindex $_col2278 $_ind2278 ]
                        #item 2279
                        decr_node_outgoing $db $item_id
                        #item 22780003
                        incr _ind2278
                        continue
                    } else {
                        break
                    }
                }
                #item 2333
                set olinks [ get_truck_links $otruck ]
                set links [ get_truck_links $truck ]
                set nlinks [ concat $olinks $links ]
                #item 2334
                set ntruck [ create_truck $stack $nlinks ]
                break
            } else {
                #item 22970003
                incr i
                continue
            }
        } else {
            #item 2341
            lappend otrucks $truck
            set ntruck {}
            break
        }
    }
    #item 2332
    return [ list $otrucks $ntruck ]
}

proc merge_stacks { left right } {
    #item 668
    set stack $left
    set intersection {}
    #item 6660001
    set _col666 $right
    set _len666 [ llength $_col666 ]
    set _ind666 0
    while { 1 } {
        #item 6660002
        if {$_ind666 < $_len666} {
            #item 6660004
            set right_item [ lindex $_col666 $_ind666 ]
            #item 669
            if {[ contains $left $right_item ]} {
                #item 670
                lappend intersection $right_item
            } else {
                #item 673
                lappend stack $right_item
            }
            #item 6660003
            incr _ind666
            continue
        } else {
            break
        }
    }
    #item 674
    return [ list $stack $intersection ]
}

proc merge_trucks { db otrucks ntrucks } {
    while { 1 } {
        #item 1752
        unpack [ merge_trucks_once $db $otrucks $ntrucks ] \
        	otrucks ntrucks
        #item 1753
        if {[ llength $ntrucks ] == 0} {
            break
        } else {
            continue
        }
    }
    #item 1755
    return $otrucks
}

proc merge_trucks_once { db otrucks trucks } {
    #item 1699
    set ntrucks {}
    set otrucks2 $otrucks
    #item 23360001
    set _col2336 $trucks
    set _len2336 [ llength $_col2336 ]
    set _ind2336 0
    while { 1 } {
        #item 23360002
        if {$_ind2336 < $_len2336} {
            #item 23360004
            set truck [ lindex $_col2336 $_ind2336 ]
            #item 1701
            unpack [ merge_one_truck $db $otrucks2 $truck ] \
            	otrucks2 ntruck
            #item 2337
            if {$ntruck == ""} {
                
            } else {
                #item 2340
                lappend ntrucks $ntruck
            }
            #item 23360003
            incr _ind2336
            continue
        } else {
            break
        }
    }
    #item 2508
    set otrucks2 [ collapse_trucks $db $otrucks2 ]
    set ntrucks [ collapse_trucks $db $ntrucks ]
    #item 1723
    return [ list $otrucks2 $ntrucks ]
}

proc node_count { db } {
    #item 464
    return [ $db onecolumn {
    	select count(*)
    	from nodes 
    } ]
}

proc node_exists { db item_id } {
    #item 1819
    set count [ $db onecolumn {
    	select count(*)
    	from nodes
    	where item_id = :item_id } ]
    #item 1820
    return $count
}

proc pop { db } {
    #item 2074
    variable g_stack
    #item 2075
    set item [ lindex $g_stack end ]
    set g_stack [ lreplace $g_stack end end ]
    return $item
}

proc print_nodes { db } {
    #item 2485
    
    puts \n
    $db eval {
    	select * from nodes order by item_id
    } {
    	set link0 [ $db onecolumn { select dst, link_type
    		from links
    		where src = :item_id and ordinal = 0
    	} ]
    
    	set link1 [ $db onecolumn { select dst, link_type
    		from links
    		where src = :item_id and ordinal = 1
    	} ]
    	puts "$item_id $incount $real_item: $link0, $link1"	
    }
}

proc print_state { state } {
    #item 1494
    set tree [ get_state_tree $state ]
    set points [ get_state_points $state ]
    set remaining [ get_state_remaining $state ]
    set passed [ get_state_passed $state ]
    set nodes [ get_state_nodes $state ]
    
    set parents_map [ get_state_parents $state ]
    set incounts_map [ get_state_incount $state ]
    
    array set parents $parents_map
    array set incounts $incounts_map
    #item 1499
    puts "tree: $tree"
    #item 1500
    puts "remaining: $remaining, passed: $passed"
    #item 1501
    parray parents
    puts ----------
    parray incounts
    #item 15080001
    set _col1508 $points
    set _len1508 [ llength $_col1508 ]
    set _ind1508 0
    while { 1 } {
        #item 15080002
        if {$_ind1508 < $_len1508} {
            #item 15080004
            set point [ lindex $_col1508 $_ind1508 ]
            #item 1510
            unpack $point item_id path stack stage
            puts "point item_id: $item_id, path: $path, stack: $stack, stage: $stage"
            #item 15080003
            incr _ind1508
            continue
        } else {
            break
        }
    }
    #item 1511
    puts "nodes: $nodes\n"
}

proc print_tree_path { leaf } {
    #item 2486
    return
    #item 1515
    variable debug_paths
    #item 1518
    set steps {}
    set current $leaf
    while { 1 } {
        #item 1519
        lappend steps $current
        #item 1520
        if {[ info exists debug_paths($current) ]} {
            #item 1522
            set current $debug_paths($current)
            continue
        } else {
            break
        }
    }
    #item 1524
    set steps [ lreverse $steps ]
    #item 1531
    puts \n\n\n===========================\n\n\n
    #item 15250001
    set _col1525 $steps
    set _len1525 [ llength $_col1525 ]
    set _ind1525 0
    while { 1 } {
        #item 15250002
        if {$_ind1525 < $_len1525} {
            #item 15250004
            set state [ lindex $_col1525 $_ind1525 ]
            #item 1527
            print_state $state
            puts ------------------------------------------
            #item 15250003
            incr _ind1525
            continue
        } else {
            break
        }
    }
}

proc push { db state } {
    #item 2071
    variable g_stack
    #item 2070
    lappend g_stack $state
}

proc record_edge { src dst } {
    #item 2487
    return
    #item 1473
    variable debug_paths
    #item 1474
    set debug_paths($dst) $src
}

proc remove_dummy { tree } {
    #item 1813
    return [ lreplace $tree 1 1 ]
}

proc remove_if_loop_exit { prev leaves } {
    #item 2177
    if {[ llength $prev ] == 0} {
        #item 2180
        return $prev
    } else {
        #item 2181
        set last [ lindex $prev end ]
        #item 2183
        if {[ contains $leaves $last ]} {
            #item 2180
            return $prev
        } else {
            #item 2182
            return [ lreplace $prev end end ]
        }
    }
}

proc set_link_dst { db link_id new_dst } {
    #item 286
    $db eval {
    	update links
    	set dst = :new_dst
    	where link_id = :link_id
    }
}

proc set_link_src { db link_id new_src } {
    #item 2022
    $db eval {
    	update links
    	set src = :new_src
    	where link_id = :link_id
    }
}

proc set_link_type { db link_id link_type } {
    #item 272
    $db eval {
    	update links
    	set link_type = :link_type
    	where link_id = :link_id
    }
}

proc set_node_dummy { db item_id is_dummy } {
    #item 2040
    $db eval {
    	update nodes
    	set is_dummy = :is_dummy
    	where item_id = :item_id
    }
}

proc set_node_leaves { db item_id leaves } {
    #item 1904
    $db eval {
    	update nodes
    	set leaves = :leaves
    	where item_id = :item_id
    }
}

proc set_node_real { db item_id real } {
    #item 2412
    $db eval {
    	update nodes
    	set real_item = :real
    	where item_id = :item_id
    }
}

proc set_node_split { db item_id split } {
    #item 2195
    $db eval {
    	update nodes
    	set split = :split
    	where item_id = :item_id
    }
}

proc set_node_text { db item_id text } {
    #item 2400
    $db eval {
    	update nodes
    	set text_lines = :text
    	where item_id = :item_id
    }
}

proc set_node_trucks { db item_id trucks } {
    #item 1658
    $db eval {
    	update nodes
    	set trucks = :trucks
    	where item_id = :item_id
    }
}

proc set_parent_break { parent break_item } {
    #item 1035
    if {[ llength $parent ] > 4} {
        #item 1037
        error "Parent already has a break: $parent"
    } else {
        #item 1039
        lappend parent $break_item
        return $parent
    }
}

proc should_give_up { state counter } {
    #item 2519
    if {$counter > 1000} {
        #item 2525
        return 1
    } else {
        #item 2523
        set points [ get_state_points $state ]
        #item 2522
        if {[ llength $points ] > 20} {
            #item 2525
            return 1
        } else {
            #item 2524
            return 0
        }
    }
}

proc should_split { db next } {
    #item 1910
    set count [ llength $next ]
    #item 19120001
    if {$count == 0} {
        #item 1919
        set result 0
    } else {
        #item 19120002
        if {$count == 1} {
            #item 1922
            set result 0
        } else {
            #item 19120003
            if {$count == 2} {
                
            } else {
                #item 19120004
                error "Unexpected switch value: $count"
            }
            #item 1921
            set node0 [ lindex $next 0 ]
            set node1 [ lindex $next 1 ]
            #item 1923
            set leaves0 [ get_node_leaves $db $node0 ]
            set leaves1 [ get_node_leaves $db $node1 ]
            #item 1924
            if {[ have_intersection $leaves0 $leaves1 ]} {
                #item 1925
                set result 1
            } else {
                #item 1927
                set result 0
            }
        }
    }
    #item 1920
    return $result
}

proc split_parents { parents_map stack } {
    #item 765
    upvar 1 $parents_map parents
    #item 13780001
    set _col1378 $stack
    set _len1378 [ llength $_col1378 ]
    set _ind1378 0
    while { 1 } {
        #item 13780002
        if {$_ind1378 < $_len1378} {
            #item 13780004
            set item_id [ lindex $_col1378 $_ind1378 ]
            #item 768
            set parent $parents($item_id)
            #item 1374
            set type [ get_parent_type $parent ]
            #item 1375
            if {$type == "if"} {
                #item 772
                set split [ get_parent_value $parent ]
                incr split
                set parents($item_id) [ set_parent_value $parent $split ]
            } else {
                
            }
            #item 13780003
            incr _ind1378
            continue
        } else {
            break
        }
    }
}

proc stack_empty { db } {
    #item 2072
    variable g_stack
    #item 2073
    set length [ llength $g_stack ]
    return [ expr { $length == 0 } ]
}

proc strip_loop { parents_map stack } {
    #item 1006
    upvar 1 $parents_map parents
    #item 1009
    set loop_pos [ find_last_stack_loop parents $stack ]
    #item 1014
    if {$loop_pos == -1} {
        #item 1025
        error "Loop node expected but not found.\nStack: $stack"
    } else {
        #item 1015
        set last [ expr { $loop_pos - 1 } ]
        return [ lrange $stack 0 $last ]
    }
}

proc tree_append { tree path item } {
    #item 623
    if {[ llength $path ] == 0} {
        #item 597
        if {[ llength $tree ] == 0} {
            #item 599
            set "Empty list in node.\nTree:\n$tree"
        } else {
            #item 596
            set header [ lindex $tree 0 ]
            #item 13670001
            if {($header == "seq") || ($header == "loop")} {
                #item 603
                set old_length [ llength $tree ]
                lappend tree $item
                #item 634
                set result [create_tar $tree $old_length ]
            } else {
                #item 601
                error "'seq' or 'loop' expected at start of list. Got '$header'."
            }
        }
    } else {
        #item 624
        set index [ lindex $path 0 ]
        set child [ lindex $tree $index ]
        #item 625
        set remaining [ lreplace $path 0 0 ]
        #item 628
        set updated [ tree_append $child $remaining $item ]
        set new_child [ get_tar_tree $updated ]
        set position [ get_tar_position $updated ]
        #item 592
        set new_tree [ lreplace $tree $index $index $new_child ]
        set result [ create_tar $new_tree $position ]
    }
    #item 635
    return $result
}

proc try_create_point { db parents_map points tree src_item ordinal path stack } {
    #item 1327
    upvar 1 $parents_map parents
    #item 1331
    set item_id [ get_linked_node $db $src_item $ordinal ]
    #item 1328
    if {[ is_link_up $db $src_item $ordinal ]} {
        #item 1337
        unpack [ tree_append $tree $path "continue" ] \
        	tree pos
        #item 1338
        set loop_pos [ find_last_stack_loop parents $stack ]
        #item 2049
        if {$loop_pos == -1} {
            #item 2052
            return ""
        } else {
            #item 2048
            set parent_id [ lindex $stack $loop_pos ]
            #item 2050
            if {$item_id == $parent_id} {
                #item 1341
                set parent $parents($parent_id)
                set value [ get_parent_value $parent ]
                incr value -1
                set parents($parent_id) [ set_parent_value $parent $value ]
                #item 1394
                join_parents parents $stack
                #item 1342
                return [ list $points $tree ]
            } else {
                #item 2052
                return ""
            }
        }
    } else {
        #item 1344
        if {$item_id == ""} {
            
        } else {
            #item 1343
            set point [ create_point $item_id $path $stack 1 ]
            #item 1332
            lappend points $point
        }
        #item 1333
        return [ list $points $tree ]
    }
}

proc visit { db key state } {
    #item 548
    $db eval {
    	insert into visited (key, state)
    	values (:key, :state)
    }
}

}
